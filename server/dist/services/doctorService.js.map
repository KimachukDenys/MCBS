{"version":3,"file":"doctorService.js","sources":["services/doctorService.ts"],"sourceRoot":"/","sourcesContent":["import { Op } from 'sequelize';\r\nimport { User, Service, DoctorProfile } from '../models';\r\nimport { UserWithProfile } from '../types/doctor';\r\n\r\ntype ProfileCreateData = {\r\n  education?: string;\r\n  experience?: string;\r\n  bio?: string;\r\n  specialization?: string;\r\n  price?: number;\r\n};\r\n\r\ntype ProfileUpdateData = ProfileCreateData & { photoUrl?: string };\r\n\r\nexport class DoctorService {\r\n  /* ---------- лікарі ⇄ сервіси ---------- */\r\n\r\n  async assignDoctorToService(serviceId: number, doctorId: number) {\r\n    const service = await Service.findByPk(serviceId);\r\n    if (!service) throw new Error('NotFound:Service');\r\n\r\n    const doctor = await User.findByPk(doctorId);\r\n    if (!doctor || doctor.role !== 'doctor') throw new Error('Validation:Doctor');\r\n\r\n    await service.addDoctor(doctor);\r\n  }\r\n\r\n  async removeDoctorFromService(serviceId: number, doctorId: number) {\r\n    const service = await Service.findByPk(serviceId);\r\n    if (!service) throw new Error('NotFound:Service');\r\n\r\n    const doctor = await User.findByPk(doctorId);\r\n    if (!doctor || doctor.role !== 'doctor') throw new Error('Validation:Doctor');\r\n\r\n    await service.removeDoctor(doctor);\r\n  }\r\n\r\n  async getDoctorsForService(serviceId: number) {\r\n    const service = await Service.findByPk(serviceId, {\r\n      include: [\r\n        {\r\n          model: User,\r\n          as: 'doctors',\r\n          where: { role: 'doctor' },\r\n          required: false,\r\n        },\r\n      ],\r\n    });\r\n    if (!service) throw new Error('NotFound:Service');\r\n    return service.doctors ?? [];\r\n  }\r\n\r\n\r\n  async getAllDoctors() {\r\n    return User.findAll({\r\n      where: { role: 'doctor' },\r\n      attributes: ['id', 'firstName', 'lastName', 'email', 'phone', 'photoUrl'],\r\n      include: [{ model: DoctorProfile, as: 'profile' }],\r\n    }) as unknown as UserWithProfile[];\r\n  }\r\n\r\n\r\n  async createDoctorProfile(userId: number, data: ProfileCreateData) {\r\n    const user = await User.findByPk(userId);\r\n    if (!user || user.role !== 'doctor') throw new Error('NotFound:Doctor');\r\n\r\n    const exists = await DoctorProfile.findOne({ where: { userId } });\r\n    if (exists) throw new Error('Conflict:Profile');\r\n\r\n    return DoctorProfile.create({ userId, ...data });\r\n  }\r\n\r\n  async updateDoctorProfile(userId: number, data: ProfileUpdateData) {\r\n    const profile = await DoctorProfile.findOne({ where: { userId } });\r\n    if (!profile) throw new Error('NotFound:Profile');\r\n\r\n    Object.assign(profile, {\r\n      education: data.education ?? profile.education,\r\n      experience: data.experience ?? profile.experience,\r\n      bio: data.bio ?? profile.bio,\r\n      specialization: data.specialization ?? profile.specialization,\r\n      price: data.price ?? profile.price,\r\n    });\r\n    await profile.save();\r\n    return profile;\r\n  }\r\n\r\n  async getDoctorProfile(doctorId: number) {\r\n    if (isNaN(doctorId)) throw new Error('Validation:doctorId');\r\n\r\n    const user = await User.findOne({\r\n      where: { id: doctorId, role: 'doctor' },\r\n      attributes: ['id', 'firstName', 'lastName', 'email', 'phone', 'photoUrl'],\r\n      include: [\r\n        { model: DoctorProfile, as: 'profile' },\r\n        { model: Service, as: 'services', through: { attributes: [] } },\r\n      ],\r\n    });\r\n    if (!user) throw new Error('NotFound:Doctor');\r\n    return user;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"6a3d6d14-3abc-5132-807a-4021a62c3f56"}