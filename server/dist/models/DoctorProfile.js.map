{"version":3,"file":"DoctorProfile.js","sources":["models/DoctorProfile.ts"],"sourceRoot":"/","sourcesContent":["import {\r\n  DataTypes,\r\n  Model,\r\n  Optional,\r\n  Association,\r\n} from 'sequelize';\r\nimport sequelize from '../config/database';\r\nimport User from './User';\r\nimport Review from './Review';\r\nimport Appointment from './Appointment';\r\n\r\n\r\ninterface DoctorProfileAttrs {\r\n  id: number;\r\n  userId: number;\r\n  education: string | null;\r\n  experience: string | null;\r\n  bio: string | null;\r\n  specialization: string;\r\n  price: number;\r\n  rating?: number | null;      // віртуальне\r\n}\r\n\r\ntype DoctorProfileCreationAttrs = Optional<\r\n  DoctorProfileAttrs,\r\n  'id' | 'rating' | 'specialization' | 'price'\r\n>;\r\n\r\nclass DoctorProfile\r\n  extends Model<DoctorProfileAttrs, DoctorProfileCreationAttrs>\r\n  implements DoctorProfileAttrs\r\n{\r\n  declare id: number;\r\n  declare userId: number;\r\n  declare education: string | null;\r\n  declare experience: string | null;\r\n  declare bio: string | null;\r\n  declare specialization: string;\r\n  declare price: number;\r\n  declare rating: number | null;\r\n\r\n  // метод, щоб TS знав\r\n  declare calculateRating: () => Promise<number | null>;\r\n\r\n  /* асоціації для TS (не обов’язково, але корисно) */\r\n  declare static associations: {\r\n    user: Association<DoctorProfile, User>;\r\n    reviews: Association<DoctorProfile, Review>;\r\n  };\r\n}\r\n\r\nDoctorProfile.init(\r\n  {\r\n    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },\r\n    userId: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n      unique: true,\r\n      references: { model: User, key: 'id' },\r\n    },\r\n    education: { type: DataTypes.TEXT, allowNull: true },\r\n    experience: { type: DataTypes.TEXT, allowNull: true },\r\n    bio: { type: DataTypes.TEXT, allowNull: true },\r\n    specialization: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: 'Лікар',\r\n    },\r\n    price: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n      defaultValue: 0,\r\n      validate: { min: 0 },\r\n    },\r\n    rating: {\r\n      type: DataTypes.VIRTUAL,\r\n      get() {\r\n        return this.getDataValue('rating') ?? null;\r\n      },\r\n    },\r\n  },\r\n  {\r\n    sequelize,\r\n    modelName: 'DoctorProfile',\r\n    tableName: 'doctor_profiles',\r\n    timestamps: true,\r\n    defaultScope: {\r\n      attributes: { include: ['rating'] },\r\n    },\r\n  }\r\n);\r\n\r\nDoctorProfile.prototype.calculateRating = async function () {\r\n  const reviews = await Review.findAll({\r\n    include: [\r\n      {\r\n        model: Appointment,\r\n        as: 'appointment',\r\n        attributes: [],\r\n        where: { doctorId: this.userId },\r\n      },\r\n    ],\r\n  });\r\n\r\n  if (reviews.length === 0) return null;\r\n  const sum = reviews.reduce((acc, r) => acc + r.rating, 0);\r\n  return sum / reviews.length;\r\n};\r\n\r\n\r\nDoctorProfile.afterFind(\r\n  async (\r\n    result: DoctorProfile | readonly DoctorProfile[] | null\r\n  ): Promise<void> => {\r\n    const profiles: DoctorProfile[] = result\r\n      ? Array.isArray(result)\r\n        ? Array.from(result) // робимо мутабельний масив\r\n        : [result]\r\n      : [];\r\n\r\n    for (const profile of profiles) {\r\n      const avg = await profile.calculateRating();\r\n      profile.setDataValue('rating', avg);\r\n    }\r\n  }\r\n);\r\n\r\nexport default DoctorProfile;\r\n"],"names":[],"mappings":"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","debug_id":"b25a520b-c343-5698-a850-3ad22cf54f91"}