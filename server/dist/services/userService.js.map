{"version":3,"file":"userService.js","sources":["services/userService.ts"],"sourceRoot":"/","sourcesContent":["import { injectable, inject } from 'tsyringe';\r\nimport { Op } from 'sequelize';\r\nimport type { Gender } from '../models/User';\r\n\r\n@injectable()\r\nexport class UserService {\r\n  constructor(\r\n    @inject('Bcrypt')     private bcrypt: typeof import('bcrypt'),\r\n    @inject('Jwt')        private jwt: typeof import('jsonwebtoken'),\r\n    @inject('JwtSecret')  private jwtSecret: string,\r\n    @inject('UserModel')  private UserModel: typeof import('../models/User').default,\r\n  ) {}\r\n\r\n  /* ---------- register ---------- */\r\n  async registerUser(data: {\r\n    firstName: string; lastName: string; email: string;\r\n    phone: string; password: string; gender: Gender;\r\n  }) {\r\n    const { firstName, lastName, email, phone, password, gender } = data;\r\n\r\n    if (!firstName || !lastName || !email || !phone || !password || !gender) {\r\n      throw new Error('ValidationError: All fields are required');\r\n    }\r\n    if (!['male', 'female'].includes(gender)) {\r\n      throw new Error('ValidationError: Invalid gender value');\r\n    }\r\n\r\n    const existingUser = await this.UserModel.findOne({\r\n      where: { [Op.or]: [{ email }, { phone }] },\r\n    });\r\n    if (existingUser) {\r\n      throw new Error('ConflictError: User with this email or phone already exists');\r\n    }\r\n\r\n    const hashedPassword = await this.bcrypt.hash(password, 10);\r\n\r\n    const newUser = await this.UserModel.create({\r\n      firstName, lastName, email, phone, gender,\r\n      password: hashedPassword, role: 'patient',\r\n    });\r\n\r\n    return {\r\n      id: newUser.id,\r\n      firstName: newUser.firstName,\r\n      lastName: newUser.lastName,\r\n      email: newUser.email,\r\n      phone: newUser.phone,\r\n      gender: newUser.gender,\r\n      role: newUser.role,\r\n    };\r\n  }\r\n\r\n  /* ---------- login ---------- */\r\n  async loginUser(email: string, password: string) {\r\n    const user = await this.UserModel.findOne({ where: { email } });\r\n    if (!user) throw new Error('AuthError: Invalid email or password');\r\n\r\n    const isMatch = await this.bcrypt.compare(password, user.password);\r\n    if (!isMatch) throw new Error('AuthError: Invalid email or password');\r\n\r\n    const token = this.jwt.sign(\r\n      { id: user.id, role: user.role, firstName: user.firstName, lastName: user.lastName },\r\n      this.jwtSecret,\r\n      { expiresIn: '1d' },\r\n    );\r\n\r\n    return {\r\n      token,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        role: user.role,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n      },\r\n    };\r\n  }\r\n\r\n  /* ---------- get profile ---------- */\r\n  async getUserProfile(id: number) {\r\n    if (Number.isNaN(id)) throw new Error('ValidationError: Invalid userId parameter');\r\n\r\n    const user = await this.UserModel.findOne({\r\n      where: { id },\r\n      attributes: ['id', 'firstName', 'lastName', 'email', 'phone', 'photoUrl'],\r\n    });\r\n    if (!user) throw new Error('NotFoundError: User not found');\r\n\r\n    return user;\r\n  }\r\n\r\n  /* ---------- edit profile ---------- */\r\n  async editUserProfile(\r\n    userId: number,\r\n    data: { firstName?: string; lastName?: string; phone?: string; photoFileName?: string },\r\n  ) {\r\n    const user = await this.UserModel.findByPk(userId);\r\n    if (!user) throw new Error('NotFoundError: User not found');\r\n\r\n    const { firstName, lastName, phone, photoFileName } = data;\r\n\r\n    /* перевірка унікальності телефону */\r\n    if (phone) {\r\n      const exists = await this.UserModel.findOne({\r\n        where: { phone, id: { [Op.ne]: userId } },\r\n      });\r\n      if (exists) throw new Error('ConflictError: Phone already in use by another user');\r\n    }\r\n\r\n    const photoUrl = photoFileName ? `images/${photoFileName}` : undefined;\r\n\r\n    await user.update({\r\n      firstName: firstName ?? user.firstName,\r\n      lastName:  lastName  ?? user.lastName,\r\n      phone:     phone     ?? user.phone,\r\n      photoUrl:  photoUrl  ?? user.photoUrl,\r\n    });\r\n\r\n    return {\r\n      id: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      phone: user.phone,\r\n      photoUrl: user.photoUrl,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"b8ee48a5-f381-5366-8482-ec1604b10829"}